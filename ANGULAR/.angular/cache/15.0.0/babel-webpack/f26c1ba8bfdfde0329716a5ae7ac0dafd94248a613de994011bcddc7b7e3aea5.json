{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nlet TachesComponent = class TachesComponent {\n  constructor(tacheService, router, userService) {\n    this.tacheService = tacheService;\n    this.router = router;\n    this.userService = userService;\n    this.titreListe = \"\";\n    this.baseStatuts = [];\n    this.baseListeTaches = [];\n  }\n  ngOnInit() {\n    this.tacheService.getTaches().subscribe({\n      next: listeTaches => {\n        listeTaches.forEach((tache, index) => {\n          if (index == 0) {\n            this.baseStatuts.push(tache.statut);\n          } else {\n            let cpt = 0;\n            this.baseStatuts.forEach(statut => {\n              if (tache.statut == statut) {\n                cpt++;\n              }\n            });\n            if (cpt == 0) {\n              this.baseStatuts.push(tache.statut);\n            }\n          }\n        });\n        this.baseStatuts.forEach(statut => {\n          let newListeListeTaches = {\n            titreListe: statut,\n            titreTache: \"\",\n            taches: []\n          };\n          this.tacheService.getTaches().subscribe({\n            next: listeTaches => {\n              let listeTachesFiltred = listeTaches.filter(tache => tache.statut == statut);\n              newListeListeTaches.taches = listeTachesFiltred;\n              this.baseListeTaches.push(newListeListeTaches);\n            }\n          });\n        });\n      }\n    });\n  }\n  ajouterListeTaches() {\n    let newListeListeTaches = {\n      titreListe: \"\",\n      titreTache: \"\",\n      taches: []\n    };\n    let listeExisteDeja = this.baseListeTaches.filter(liste => liste.titreListe == this.titreListe);\n    if (listeExisteDeja.length == 0) {\n      //on regarde si la liste qu'on veut créer n'existe pas déjà \n      this.tacheService.getTaches().subscribe({\n        next: listeTaches => {\n          let listeTachesFiltred = listeTaches.filter(tache => tache.statut == this.titreListe);\n          newListeListeTaches.taches = listeTachesFiltred;\n          newListeListeTaches.titreListe = this.titreListe;\n          if (listeTachesFiltred.length == 0) {\n            //le statut n'exite pas dans la liste\n            this.baseListeTaches.push(newListeListeTaches);\n          }\n        }\n      });\n    }\n  }\n  ajouterTache(listeTaches) {\n    let newTache = {\n      titre: listeTaches.titreTache,\n      termine: false,\n      statut: listeTaches.titreListe\n    };\n    this.tacheService.ajoutTaches(newTache).subscribe({\n      next: data => {\n        this.baseListeTaches.forEach(liste => {\n          if (liste.titreListe == listeTaches.titreListe) {\n            liste.taches.push(data);\n          }\n        });\n      }\n    });\n  }\n  supprimerListeTache(listeTaches) {\n    listeTaches.taches.forEach(tache => {\n      this.tacheService.removeTaches(tache).subscribe({});\n    });\n    this.baseListeTaches = this.baseListeTaches.filter(liste => liste.titreListe != listeTaches.titreListe);\n  }\n  supprimerTache(listeTaches, tache) {\n    this.tacheService.removeTaches(tache).subscribe({\n      next: () => {\n        listeTaches.taches = listeTaches.taches.filter(e => tache._id != e._id);\n      }\n    });\n  }\n  modifier(tache) {\n    tache.termine = !tache.termine;\n    this.tacheService.updateTaches(tache).subscribe({});\n  }\n  loggout() {\n    this.userService.logout().subscribe(() => {\n      this.router.navigate(['']);\n    });\n  }\n  drop(event) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data.taches, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data.taches, event.container.data.taches, event.previousIndex, event.currentIndex);\n    }\n    event.item.data.statut = event.container.data.titreListe;\n    this.tacheService.updateTaches(event.item.data).subscribe({});\n  }\n};\nTachesComponent = __decorate([Component({\n  selector: 'app-taches',\n  templateUrl: './taches.component.html',\n  styleUrls: ['./taches.component.css']\n})], TachesComponent);\nexport { TachesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}